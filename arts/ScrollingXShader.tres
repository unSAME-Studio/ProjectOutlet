[gd_resource type="VisualShader" load_steps=21 format=2]

[ext_resource path="res://arts/outlet_uv_error.png" type="Texture" id=1]
[ext_resource path="res://arts/outlet_uv.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeVectorDecompose" id=21]

[sub_resource type="VisualShaderNodeScalarOp" id=22]
operator = 3

[sub_resource type="VisualShaderNodeVectorDecompose" id=23]

[sub_resource type="VisualShaderNodeScalarOp" id=24]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=25]

[sub_resource type="VisualShaderNodeScalarUniform" id=26]
uniform_name = "Speed"

[sub_resource type="VisualShaderNodeScalarOp" id=27]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=28]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=29]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorOp" id=30]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=31]
uniform_name = "UVSize"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=15]

[sub_resource type="VisualShaderNodeScalarUniform" id=17]
uniform_name = "Opacity"

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_21;
uniform float UVSize;
uniform float Speed;
uniform sampler2D tex_frg_2;
uniform float Opacity;



void vertex() {
// Output:0

}

void fragment() {
// Texture:21
	vec4 tex_frg_21_read = texture(tex_frg_21, UV.xy);
	vec3 n_out21p0 = tex_frg_21_read.rgb;
	float n_out21p1 = tex_frg_21_read.a;

// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:15
	float n_out15p0 = n_out3p0.x;
	float n_out15p1 = n_out3p0.y;
	float n_out15p2 = n_out3p0.z;

// Input:12
	vec3 n_out12p0 = vec3(SCREEN_PIXEL_SIZE, 1.0);

// VectorDecompose:13
	float n_out13p0 = n_out12p0.x;
	float n_out13p1 = n_out12p0.y;
	float n_out13p2 = n_out12p0.z;

// ScalarOp:14
	float n_out14p0 = n_out13p0 / n_out13p1;

// ScalarOp:16
	float n_out16p0 = n_out15p1 * n_out14p0;

// VectorCompose:17
	float n_in17p2 = 0.00000;
	vec3 n_out17p0 = vec3(n_out15p0, n_out16p0, n_in17p2);

// ScalarUniform:23
	float n_out23p0 = UVSize;

// VectorOp:22
	vec3 n_out22p0 = n_out17p0 * vec3(n_out23p0);

// Input:4
	float n_out4p0 = TIME;

// ScalarUniform:18
	float n_out18p0 = Speed;

// ScalarOp:5
	float n_out5p0 = n_out4p0 * n_out18p0;

// VectorOp:6
	vec3 n_out6p0 = n_out22p0 + vec3(n_out5p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out6p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarUniform:8
	float n_out8p0 = Opacity;

// ScalarOp:19
	float n_out19p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) * n_out8p0;

// ScalarOp:20
	float n_out20p0 = n_out19p0 * n_out21p1;

// Output:0
	COLOR.rgb = n_out21p0;
	COLOR.a = n_out20p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -439.713, 107.375 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 560, 160 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -80, 40 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( -1380, -20 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( -680, 300 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( -460, 280 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( -280, 140 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( -80, 280 )
nodes/fragment/12/node = SubResource( 20 )
nodes/fragment/12/position = Vector2( -1580, 160 )
nodes/fragment/13/node = SubResource( 21 )
nodes/fragment/13/position = Vector2( -1320, 160 )
nodes/fragment/14/node = SubResource( 22 )
nodes/fragment/14/position = Vector2( -1080, 140 )
nodes/fragment/15/node = SubResource( 23 )
nodes/fragment/15/position = Vector2( -1140, -20 )
nodes/fragment/16/node = SubResource( 24 )
nodes/fragment/16/position = Vector2( -840, 40 )
nodes/fragment/17/node = SubResource( 25 )
nodes/fragment/17/position = Vector2( -600, -20 )
nodes/fragment/18/node = SubResource( 26 )
nodes/fragment/18/position = Vector2( -700, 400 )
nodes/fragment/19/node = SubResource( 27 )
nodes/fragment/19/position = Vector2( 140, 220 )
nodes/fragment/20/node = SubResource( 28 )
nodes/fragment/20/position = Vector2( 340, 260 )
nodes/fragment/21/node = SubResource( 29 )
nodes/fragment/21/position = Vector2( -100, 360 )
nodes/fragment/22/node = SubResource( 30 )
nodes/fragment/22/position = Vector2( -300, -60 )
nodes/fragment/23/node = SubResource( 31 )
nodes/fragment/23/position = Vector2( -560, 100 )
nodes/fragment/connections = PoolIntArray( 5, 0, 6, 1, 6, 0, 2, 0, 4, 0, 5, 0, 12, 0, 13, 0, 13, 0, 14, 0, 13, 1, 14, 1, 3, 0, 15, 0, 15, 1, 16, 0, 16, 0, 17, 1, 15, 0, 17, 0, 14, 0, 16, 1, 18, 0, 5, 1, 8, 0, 19, 1, 19, 0, 20, 0, 20, 0, 0, 1, 21, 1, 20, 1, 17, 0, 22, 0, 22, 0, 6, 0, 23, 0, 22, 1, 2, 0, 19, 0, 21, 0, 0, 0 )
