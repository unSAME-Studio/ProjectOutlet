[gd_resource type="VisualShader" load_steps=22 format=2]

[ext_resource path="res://arts/errorpng.png" type="Texture" id=1]
[ext_resource path="res://arts/outlet_uv.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeVectorDecompose" id=21]

[sub_resource type="VisualShaderNodeScalarOp" id=22]
operator = 3

[sub_resource type="VisualShaderNodeVectorDecompose" id=23]

[sub_resource type="VisualShaderNodeScalarOp" id=24]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=25]

[sub_resource type="VisualShaderNodeScalarUniform" id=26]
uniform_name = "Speed"

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=30]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=31]
uniform_name = "UVSize"

[sub_resource type="VisualShaderNodeTexture" id=32]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeSwitch" id=33]

[sub_resource type="VisualShaderNodeInput" id=34]
input_name = "uv"

[sub_resource type="VisualShaderNodeBooleanUniform" id=35]
uniform_name = "Visible"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorCompose" id=36]

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=15]

[resource]
code = "shader_type canvas_item;
uniform bool Visible;
uniform float UVSize;
uniform float Speed;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_26;



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:29
	bool n_out29p0 = Visible;

// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:15
	float n_out15p0 = n_out3p0.x;
	float n_out15p1 = n_out3p0.y;
	float n_out15p2 = n_out3p0.z;

// Input:12
	vec3 n_out12p0 = vec3(SCREEN_PIXEL_SIZE, 1.0);

// VectorDecompose:13
	float n_out13p0 = n_out12p0.x;
	float n_out13p1 = n_out12p0.y;
	float n_out13p2 = n_out12p0.z;

// ScalarOp:14
	float n_out14p0 = n_out13p0 / n_out13p1;

// ScalarOp:16
	float n_out16p0 = n_out15p1 * n_out14p0;

// VectorCompose:17
	float n_in17p2 = 0.00000;
	vec3 n_out17p0 = vec3(n_out15p0, n_out16p0, n_in17p2);

// ScalarUniform:23
	float n_out23p0 = UVSize;

// VectorOp:22
	vec3 n_out22p0 = n_out17p0 * vec3(n_out23p0);

// Input:4
	float n_out4p0 = TIME;

// ScalarUniform:18
	float n_out18p0 = Speed;

// ScalarOp:5
	float n_out5p0 = n_out4p0 * n_out18p0;

// VectorCompose:30
	float n_in30p2 = 0.00000;
	vec3 n_out30p0 = vec3(n_out5p0, n_out5p0, n_in30p2);

// VectorOp:6
	vec3 n_out6p0 = n_out22p0 + n_out30p0;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out6p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Input:28
	vec3 n_out28p0 = vec3(UV, 0.0);

// Texture:26
	vec4 tex_frg_26_read = texture(tex_frg_26, n_out28p0.xy);
	vec3 n_out26p0 = tex_frg_26_read.rgb;
	float n_out26p1 = tex_frg_26_read.a;

// VectorSwitch:27
	vec3 n_out27p0;
	if(n_out29p0)
	{
		n_out27p0 = n_out2p0;
	}
	else
	{
		n_out27p0 = n_out26p0;
	}

// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out26p1;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 640, 160 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( 0, 40 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( -1380, -20 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( -1140, 360 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( -920, 340 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( -280, 140 )
nodes/fragment/12/node = SubResource( 20 )
nodes/fragment/12/position = Vector2( -1580, 160 )
nodes/fragment/13/node = SubResource( 21 )
nodes/fragment/13/position = Vector2( -1320, 160 )
nodes/fragment/14/node = SubResource( 22 )
nodes/fragment/14/position = Vector2( -1080, 140 )
nodes/fragment/15/node = SubResource( 23 )
nodes/fragment/15/position = Vector2( -1140, -20 )
nodes/fragment/16/node = SubResource( 24 )
nodes/fragment/16/position = Vector2( -840, 40 )
nodes/fragment/17/node = SubResource( 25 )
nodes/fragment/17/position = Vector2( -600, -20 )
nodes/fragment/18/node = SubResource( 26 )
nodes/fragment/18/position = Vector2( -1160, 460 )
nodes/fragment/22/node = SubResource( 30 )
nodes/fragment/22/position = Vector2( -320, -40 )
nodes/fragment/23/node = SubResource( 31 )
nodes/fragment/23/position = Vector2( -560, 100 )
nodes/fragment/26/node = SubResource( 32 )
nodes/fragment/26/position = Vector2( 0, 340 )
nodes/fragment/27/node = SubResource( 33 )
nodes/fragment/27/position = Vector2( 360, 140 )
nodes/fragment/28/node = SubResource( 34 )
nodes/fragment/28/position = Vector2( -240, 440 )
nodes/fragment/29/node = SubResource( 35 )
nodes/fragment/29/position = Vector2( 0, 280 )
nodes/fragment/30/node = SubResource( 36 )
nodes/fragment/30/position = Vector2( -540, 340 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 12, 0, 13, 0, 13, 0, 14, 0, 13, 1, 14, 1, 3, 0, 15, 0, 15, 1, 16, 0, 16, 0, 17, 1, 15, 0, 17, 0, 14, 0, 16, 1, 18, 0, 5, 1, 17, 0, 22, 0, 22, 0, 6, 0, 23, 0, 22, 1, 2, 0, 27, 1, 26, 0, 27, 2, 28, 0, 26, 0, 26, 1, 0, 1, 27, 0, 0, 0, 29, 0, 27, 0, 6, 0, 2, 0, 30, 0, 6, 1, 5, 0, 30, 1, 5, 0, 30, 0, 4, 0, 5, 0, 12, 0, 13, 0, 13, 0, 14, 0, 13, 1, 14, 1, 3, 0, 15, 0, 15, 1, 16, 0, 16, 0, 17, 1, 15, 0, 17, 0, 14, 0, 16, 1, 18, 0, 5, 1, 17, 0, 22, 0, 22, 0, 6, 0, 23, 0, 22, 1, 2, 0, 27, 1, 26, 0, 27, 2, 28, 0, 26, 0, 26, 1, 0, 1, 27, 0, 0, 0, 29, 0, 27, 0, 6, 0, 2, 0, 30, 0, 6, 1, 5, 0, 30, 1, 5, 0, 30, 0 )
